package frontEnd;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JComponent;
import util.Location;
import util.Vector;
import backEnd.Turtle;


/**
 * TurtleView class extends JComponent. Receives information from Canvas in the form of a Turtle
 * Object. Draws Turtle and lines generated by Turtle movement.
 * 
 * @author Danny Goodman
 */
public class TurtleView extends JComponent {

    private static final long serialVersionUID = 1L;
    private static final int VIEW_HEIGHT = 488;
    private static final int VIEW_WIDTH = 600;
    public static final double TURTLE_HEIGHT = 30;
    private static final double TURTLE_ANGLE_1 = 40;
    private static final double TURTLE_ANGLE_2 = (180 - TURTLE_ANGLE_1) / 2;

    private boolean isInitialized;
    private Location myTurtleLocation;
    private Location myTurtleNextLocation;
    private double myTurtleHeading;
    private boolean myTurtlePenDown;
    private boolean myTurtleVisible;

    /**
     * TurtleView Constructor. Sets size. Initializes turtle parameters.
     */
    public TurtleView () {
        setPreferredSize(new Dimension(VIEW_WIDTH, VIEW_HEIGHT));
        setFocusable(true);
        requestFocus();
        resetTurtle();
        isInitialized = false;
    }

    /**
     * Paint the contents of the canvas.
     * 
     * Never called by you directly, instead called by Java runtime
     * when area of screen covered by this container needs to be
     * displayed (i.e., creation, uncovering, change in status)
     * 
     * @param pen used to paint shape on the screen
     */
    @Override
    public void paintComponent (Graphics pen) {
        if (!isInitialized) {
            initialize(pen);
            isInitialized = true;
        }
        drawTurtle(pen);
    }

    /**
     * Updates the Turtle parameters based on the new information. Calls repaint().
     * 
     * @param changedTurtle: Turtle information passed to view.
     */

    public void updateTurtle (Turtle changedTurtle) {
        myTurtleNextLocation = changedTurtle.getLocation();
        myTurtleHeading = changedTurtle.getHeading();
        myTurtlePenDown = changedTurtle.isPenDown();
        myTurtleVisible = changedTurtle.isVisible();
        repaint();
    }

    private void initialize (Graphics pen) {
        pen.setColor(Color.WHITE);
        pen.fillRect(0, 0, getSize().width, getSize().height);
    }

    private void drawTurtle (Graphics pen) {
        if (myTurtlePenDown)
            drawTrail(pen);
        myTurtleLocation = myTurtleNextLocation;
        if (myTurtleVisible) {
            drawTriangle(pen);
        }
    }

    private void drawTrail (Graphics pen) {
        pen.setColor(Color.BLACK);
        drawLine(pen, myTurtleLocation, myTurtleNextLocation);
    }

    private void drawLine (Graphics pen, Location start, Location finish) {
        start = translateCoordinates(start);
        finish = translateCoordinates(finish);
        pen.drawLine((int) start.getX(), (int) start.getY(),
                     (int) finish.getX(), (int) finish.getY());
    }

    private void drawTriangle (Graphics pen) {
        Vector centerToHead = new Vector(myTurtleHeading, TURTLE_HEIGHT * 2 / 3);
        Vector headToLeft = new Vector(myTurtleHeading - (180 - (TURTLE_ANGLE_1 / 2)),
                                       TURTLE_HEIGHT / Math.sin(Math.toRadians(TURTLE_ANGLE_2)));
        Vector leftToRight = new Vector(myTurtleHeading + 90,
                                        2*TURTLE_HEIGHT / Math.tan(Math.toRadians(TURTLE_ANGLE_2)));
        Location vertex = new Location(myTurtleLocation.getX() + centerToHead.getXChange(),
                                       myTurtleLocation.getY() + centerToHead.getYChange());
        Location leftPoint = new Location(vertex.getX() + headToLeft.getXChange(),
                                          vertex.getY() + headToLeft.getYChange());
        Location rightPoint = new Location(leftPoint.getX() + leftToRight.getXChange(),
                                           leftPoint.getY() + leftToRight.getYChange());
        //option 1: black triangle:
//        vertex = translateCoordinates(vertex);
//        leftPoint = translateCoordinates(leftPoint);
//        rightPoint = translateCoordinates(rightPoint);
//        pen.fillPolygon(new int[]{(int) vertex.x,(int) leftPoint.x,(int) rightPoint.x}, 
//                        new int[]{(int) vertex.y,(int) leftPoint.y,(int) rightPoint.y}, 3);
        //option 2: white triangle: shows dot for pen down
        drawLine(pen, vertex, leftPoint);
        drawLine(pen, leftPoint, rightPoint);
        drawLine(pen, rightPoint, vertex);
    }

    private Location translateCoordinates (Location point) {
        double centerX = getBounds().getWidth() / 2;
        double centerY = getBounds().getHeight() / 2;
        return new Location(centerX + point.getX(), centerY - point.getY());
    }

    private void resetTurtle () {
        myTurtleLocation = Turtle.INITIAL_LOCATION;
        myTurtleHeading = Turtle.NORTH_DIRECTION;
        myTurtlePenDown = true;
        myTurtleVisible = true;
    }

}
